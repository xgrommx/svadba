<?php

/**
 * Implements hook_permission().
 * @return array
 */
function photo_permission() {
  return array(
    'administer photo' => array(
      'title' => t('Administer photo'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 * @return array
 */
function photo_menu() {
  $items = array();

  $items['photo/%photo'] = array(
    'title' => 'Photo',
    'title callback' => 'photo_page_title',
    'title arguments' => array(1),
    'page callback' => 'photo_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['photo/%photo/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['photo/%photo/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photo_form_edit', 1),
    'access arguments' => array('administer photo'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['photo/%photo/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photo_form_delete_confirm', 1),
    'access arguments' => array('administer photo'),
    'weight' => 11,
    'type' => MENU_LOCAL_TASK
  );

  $items['admin/structure/photo'] = array(
    'title' => 'Photo',
    'description' => 'Manage photo on your site.',
    'access arguments' => array('administer photo'),
    'page callback' => 'photo_page_admin',
    'page arguments' => array('list'),
    'weight' => -10,
  );

  $items['admin/structure/photo/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/structure/photo/create'] = array(
    'title' => 'Add photo',
    'page arguments' => array('create'),
    'access arguments' => array('administer photo'),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 * @return array
 */
function photo_entity_info() {
  return array(
    'photo' => array(
      'label' => t('Photo'),
      'base table' => 'photo',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'uri callback' => 'photo_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'pid',
        'label' => 'title'
      ),
      'bundles' => array(
        'photo' => array(
          'label' => t('Photo'),
          'admin' => array(
            'path' => 'admin/structure/photo',
            'access arguments' => array('administer photo'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
      'module' => 'photo',
    ),
  );
}

/**
 * Entity uri callback.
 * @param $photo
 * @return array
 */
function photo_uri($photo) {
  return array(
    'path' => 'photo/' . $photo->pid,
  );
}

/**
 * Implements hook_admin_paths().
 * @return array
 */
function photo_admin_paths() {
  return array(
    'photo/*/edit' => TRUE,
    'photo/*/delete' => TRUE,
  );
}

/**
 * Load one photo
 * @param $pid
 * @param bool $reset
 * @return mixed
 */
function photo_load($pid, $reset = FALSE) {
  $photos = photo_load_multiple(array($pid), array(), $reset);

  return reset($photos);
}

/**
 * Load multiple photos
 * @param array $pids
 * @param array $conditions
 * @param bool $reset
 * @return mixed
 */
function photo_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('photo', $pids, $conditions, $reset);
}

/**
 * Delete one photo.
 * @param $pid
 */
function photo_delete($pid) {
  photo_delete_multiple(array($pid));
}

/**
 * Delete multiple photos
 * @param $pids
 * @throws Exception
 */
function photo_delete_multiple($pids) {
  entity_get_controller('photo')->delete($pids);
}

/**
 * Implements hook_page_title().
 * @param $photo
 * @return string
 */
function photo_page_title($photo) {
  return check_plain($photo->title);
}

function photo_page($photo, $view_mode = 'full', $lang_code = NULL) {
  if (!isset($lang_code)) {
    $lang_code = $GLOBALS['language_content']->language;
  }
  // Remove previously built content, if exists.
  $photo->content = array();
  // Build fields content.
  field_attach_prepare_view('photo', array($photo->pid => $photo), $view_mode, $lang_code);
  entity_prepare_view('photo', array($photo->pid => $photo), $lang_code);

  $build = field_attach_view('photo', $photo, $view_mode, $lang_code);

  return $build;
}

/**
 * Implements hook_field_extra_fields().
 * @return array
 */
function photo_field_extra_fields() {
  $return = array();

  $return['photo']['photo'] = array(
    'form' => array(
      'title' => array(
        'label' => t('Title'),
        'description' => t('Photo title form element'),
        'weight' => -10,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => -9,
      ),
      'date' => array(
        'label' => t('Date'),
        'weight' => -8,
      ),
      'uid' => array(
        'label' => t('User'),
        'weight' => -7,
      ),
    ),
  );

  return $return;
}

/**
 * Save photo
 * @param $edit
 * @return mixed
 */
function photo_save(&$photo) {
  return entity_save('photo', $photo);
}

/**
 * Implements hook_page_admin().
 * @param string $tab
 * @return array
 */
function photo_page_admin($tab = '') {
  switch ($tab) {
    case 'create':
      $build['photo_create'] = drupal_get_form('photo_form_edit');
      break;
    default:
      $build['photo_create'] = drupal_get_form('photo_form_list');
  }

  return $build;
}

/**
 * List photos
 * @return array
 */
function photo_form_list() {
  $header = array(
    'title' => array(
      'data' => t('Title'),
      'field' => 'p.title',
    ),
    'date' => array(
      'data' => t('Date'),
      'field' => 'p.date',
      'sort' => 'asc'
    ),
    'operations' => array(
      'data' => t('Operations')
    ),
  );
  $query = db_select('photo', 'p');
  $count_query = clone $query;
  $count_query->addExpression('COUNT(p.pid)');

  $query = $query->extend('PagerDefault')->extend('TableSort');
  $query->fields('p', array('pid', 'uid', 'title', 'date', 'description'))
    ->limit(20)
    ->orderByHeader($header)
    ->setCountQuery($count_query);

  $photos = $query->execute();

  $destination = drupal_get_destination();

  $options = array();
  foreach ($photos as $photo) {
    $options[$photo->pid]['title'] = array(
      'data' => array(
        '#type' => 'link',
        '#title' => $photo->title,
        '#href' => "photo/$photo->pid"
      )
    );
    $options[$photo->pid]['date'] = format_date($photo->date, 'short');

    $operations = array();
    $operations['edit'] = array(
      'title' => t('Edit'),
      'href' => 'photo/' . $photo->pid . '/edit',
      'query' => $destination,
    );
    $operations['delete'] = array(
      'title' => t('Delete'),
      'href' => 'photo/' . $photo->pid . '/delete',
      'query' => $destination,
    );
    $options[$photo->pid]['operations'] = array();
    if (count($operations) > 1) {
      $options[$photo->pid]['operations'] = array(
        'data' => array(
          '#theme' => 'links__node_operations',
          '#links' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      );
    }
    elseif (!empty($operations)) {
      $link = reset($operations);
      $options[$photo->pid]['operations'] = array(
        'data' => array(
          '#type' => 'link',
          '#title' => $link['title'],
          '#href' => $link['href'],
          '#options' => array('query' => $link['query']),
        ),
      );
    }
  }

  $form['photos'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No photos available.'),
  );
  $form['actions'] = array('#type' => 'actions', '#attributes' => array('class' => array('container-inline')),);

  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#weight' => 5,
    '#submit' => array('photo_form_list_delete'),
  );

  $form['pager']['#markup'] = theme('pager');

  return $form;
}

/**
 * Validate for list photos
 * @param $form
 * @param $form_state
 */
function photo_form_list_validate($form, &$form_state) {
  if (!is_array($form_state['values']['photos']) || !count(array_filter($form_state['values']['photos']))) {
    form_set_error('', t('No items selected.'));
  }
}

/**
 * Delete action for list photos
 * @param $form
 * @param $form_state
 */
function photo_form_list_delete($form, &$form_state) {
  $count = count(array_filter(array_values($form_state['values']['photos'])));
  photo_delete_multiple(array_filter(array_values($form_state['values']['photos'])));
  drupal_set_message(format_plural($count, 'Deleted 1 photo.', 'Deleted @count photos.'));
}

/**
 * Edit form for photo
 * @param $form
 * @param $form_state
 * @param null $photo
 * @return array
 */
function photo_form_edit($form, &$form_state, $photo = NULL) {
  if (!isset($photo)) {
    global $user;
    $photo = (object) array(
      'title' => '',
      'description' => '',
      'date' => time(),
      'weight' => 0,
      'uid' => $user->uid,
    );
  }
  $form['#photo'] = $photo;
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $photo->title,
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $photo->description,
  );
  $form['date'] = array(
    '#type' => 'value',
    '#default_value' => $photo->date,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#default_value' => $photo->uid,
  );

  field_attach_form('photo', (object) $photo, $form, $form_state);

  if (!empty($photo->pid)) {
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $photo->pid,
    );
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('photo_form_edit_submit'),
  );
  if (!empty($photo->pid)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 15,
      '#submit' => array('photo_form_delete_submit'),
    );
  }

  return $form;
}

/**
 * Edit validate form for photos
 * @param $form
 * @param $form_state
 */
function photo_form_edit_validate($form, &$form_state) {
  field_attach_form_validate('photo', (object) $form_state['values'], $form, $form_state);
}

/**
 * Edit submit form for photos
 * @param $form
 * @param $form_state
 */
function photo_form_edit_submit($form, &$form_state) {
  $edit = (object) $form_state['values'];
  field_attach_submit('photo', $edit, $form, $form_state);
  photo_save($edit);
  $form_state['redirect'] = "photo/$edit->pid";
}

/**
 * Delete form photo
 * @param $form
 * @param $form_state
 */
function photo_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }

  $photo = $form['#photo'];
  $form_state['redirect'] = array('photo/' . $photo->pid . '/delete', array('query' => $destination));
}

/**
 * Delete confirm form for photo
 * @param $form
 * @param $form_state
 * @param $photo
 * @return array
 */
function photo_form_delete_confirm($form, &$form_state, $photo) {
  $form['#photo'] = $photo;

  $form['pid'] = array('#type' => 'value', '#value' => $photo->pid);
  return confirm_form($form,
    t('Are you sure you want to delete %title?', array('%title' => $photo->title)),
    'photo/' . $photo->pid,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete submit confirm form for photo
 * @param $form
 * @param $form_state
 */
function photo_form_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $photo = photo_load($form_state['values']['pid']);
    photo_delete($form_state['values']['pid']);
    drupal_set_message(t('%title has been deleted.', array('%title' => $photo->title)));
  }

  $form_state['redirect'] = '/photo/list';
}