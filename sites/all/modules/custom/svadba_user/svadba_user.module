<?php

/**
 * Implements hook_menu().
 * @return array
 */
function svadba_user_menu() {
  $items = array();

  $items['user/%user/photo'] = array(
    'title' => 'Photo',
    'page callback' => 'svadba_user_photo_page',
    'page arguments' => array(1, 3),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  $items['user/%user/video'] = array(
    'title' => 'Video',
    'page callback' => 'svadba_user_video_page',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  $items['user/%user/map'] = array(
    'title' => 'Map',
    'page callback' => 'svadba_user_map_page',
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -7,
  );

  $items['user/%user/article'] = array(
    'title' => 'Articles',
    'page callback' => 'svadba_user_article_page',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );

  $items['get/update/video'] = array(
    'page callback' => 'svadba_user_video_update',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['get/delete/video'] = array(
    'page callback' => 'svadba_user_video_delete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['get/upload/photo'] = array(
    'page callback' => 'svadba_user_photo_upload',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['get/delete/photo'] = array(
    'page callback' => 'svadba_user_photo_delete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 * @param $items
 */
function svadba_user_menu_alter(&$items) {
  unset($items['user/%user/contact']);
  $items['user/%user/edit']['title'] = t('General');
  $items['user/%user/edit']['weight'] = -10;
  $items['user/%user']['type'] = MENU_CALLBACK;
  $items['user/%user/view']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function svadba_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    if ($form['#user']->uid != 1) {
      //dsm($form, 'Before');
      // Access section
      $form['account']['mail']['#access'] = FALSE;
      $form['account']['pass']['#access'] = FALSE;
      $form['account']['current_pass_required_values']['#access'] = FALSE;
      $form['account']['current_pass']['#access'] = FALSE;
      $form['picture']['picture_delete']['#access'] = FALSE;
      $form['locale']['#access'] = FALSE;
      $form['contact']['#access'] = FALSE;

      // Unset section
      unset($form['picture']['picture_upload']['#description']);
      unset($form['picture']['picture_upload']['#title']);
      unset($form['field_video_access']);

      // Change section
      $form['picture']['#title'] = t('Upload avatar');
      $form['picture']['picture_upload_link'] = array(
        '#type' => 'link',
        '#href' => '',
        '#title' => t('Change photo 174 x 144'),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'svadba_user') . '/js/svadba_user_video.js' => array('type' => 'file')
          )
        ),
      );

      //dsm($form, 'After');
    }
  }
}

function svadba_user_photo_upload() {
  global $user;

  drupal_add_http_header('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT', TRUE);
  drupal_add_http_header('Last-Modified', gmdate("D, d M Y H:i:s") . ' GMT', TRUE);
  drupal_add_http_header('Cache-Control', 'no-store, no-cache, must-revalidate post-check=0, pre-check=0', TRUE);
  drupal_add_http_header('Pragma', 'no-cache', TRUE);

  // Settings
  $targetDir = 'public://' . $user->name . '/';
  if(!is_dir($targetDir)) {
    drupal_mkdir($targetDir);
  }
  // 5 minutes execution time
  @set_time_limit(5 * 60);
  // Uncomment this one to fake upload time
  // usleep(5000);

  // Get parameters
  $chunk = isset($_REQUEST['chunk']) ? $_REQUEST['chunk'] : 0;
  $chunks = isset($_REQUEST['chunks']) ? $_REQUEST['chunks'] : 0;
  $filename = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';

  // Clean the fileName for security reasons
  $extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
  $filename = file_munge_filename($filename, $extensions, FALSE);

  // Make sure the fileName is unique but only if chunking is disabled
  if ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $filename)) {
    $ext = strrpos($filename, '.');
    $filename_a = substr($filename, 0, $ext);
    $filename_b = substr($filename, $ext);

    $count = 1;
    while (file_exists($targetDir . DIRECTORY_SEPARATOR . $filename_a . '_' . $count . $filename_b))
      $count++;

    $filename = $filename_a . '_' . $count . $filename_b;
  }


  // Look for the content type header
  if (isset($_SERVER['HTTP_CONTENT_TYPE'])) {
    $contentType = $_SERVER['HTTP_CONTENT_TYPE'];
  }

  if (isset($_SERVER['CONTENT_TYPE'])) {
    $contentType = $_SERVER['CONTENT_TYPE'];
  }

  // Handle non multipart uploads older WebKit versions didn't support multipart in HTML5
  if (strpos($contentType, 'multipart') !== false) {
    if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {
      // Open temp file
      $out = fopen($targetDir . DIRECTORY_SEPARATOR . $filename, $chunk == 0 ? 'wb' : 'ab');
      if ($out) {
        // Read binary input stream and append it to temp file
        $in = fopen($_FILES['file']['tmp_name'], 'rb');

        if ($in) {
          while ($buff = fread($in, 4096))
            fwrite($out, $buff);
        } else {
          die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
        }

        fclose($in);
        fclose($out);
        @unlink($_FILES['file']['tmp_name']);
      } else {
        die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
      }
    } else {
      die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
    }
  } else {
    // Open temp file
    $out = fopen($targetDir . DIRECTORY_SEPARATOR . $filename, $chunk == 0 ? 'wb' : 'ab');
    if ($out) {
      // Read binary input stream and append it to temp file
      $in = fopen("php://input", 'rb');

      if ($in) {
        while ($buff = fread($in, 4096)) {
          fwrite($out, $buff);
        }
      } else {
        die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
      }

      fclose($in);
      fclose($out);
    } else {
      die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
    }
  }

  if ((isset($_GET['chunk']) && ($_GET['chunk'] + 1) == $_GET['chunks']) || (!isset($_GET['chunk']))) {
    $source = 'public://' . $user->name . '/' . $filename;
    $file = new stdClass();
    $file->uid      = $user->uid;
    $file->status   = 0;
    $file->filename = $filename;
    $file->uri      = $source;
    $file->filemime = file_get_mimetype($file->filename);
    $file->filesize = filesize($source);
    // Save url argument(instance_id) so we can validate file by instance settings

    $e = FALSE;
    // Here we validate file
    //drupal_alter('plup_file_validation', $file, $e);

    $data = new stdClass();

    if ($e === FALSE) {
      $return = file_save($file);
      $return->title = $return->filename;
      $return->alt = $return->filename;

      $photo = new stdClass();
      $photo->title = $return->filename;
      $photo->description = '';
      $photo->date = time();
      $photo->uid = $user->uid;
      $photo->field_photo[LANGUAGE_NONE][0] = (array)$return;

      photo_save($photo);

      $data->html = '<li data-pid=' . $photo->pid . '>' . svadba_user_photo_item($photo) . '</div>';

    } else {
      file_unmanaged_delete($file->uri);
      $return = (object) array('error_message' => $e);
    }

    drupal_json_output($data);
  }
}

function svadba_user_photo_item($photo) {
  $image = field_get_items('photo', $photo, 'field_photo');
  $picture = field_view_value('photo', $photo, 'field_photo', $image[0], array(
    'type' => 'image',
    'settings' => array(
      'image_style' => 'photo_edit_style',
    ),
  ));

  $template = array(
    'photo_item_wrapper' => array(
      '#prefix' => '<div class="photo-item-wrapper">',
      '#suffix' => '</div>',
      'photo_item_left' => array(
        '#prefix' => '<div class="photo-item-left photo-item">',
        '#suffix' => '</div>',
        'photo_item_picture_wrapper' => array(
          '#prefix' => '<div class="photo-item-picture-wrapper">',
          '#suffix' => '</div>',
          '#markup' => drupal_render($picture),
        ),
        'photo_item_remove_wrapper' => array(
          '#prefix' => '<div class="photo-item-remove-wrapper">',
          '#suffix' => '</div>',
          'photo_item_remove' => array(
            '#type' => 'checkbox',
            '#title' => t('Remove'),
          ),
        ),
      ),
      'photo_item_middle' => array(
        '#prefix' => '<div class="photo-item-middle photo-item">',
        '#suffix' => '</div>',
        'photo_item_title_wrapper' => array(
          '#prefix' => '<div class="photo-item-title-wrapper">',
          '#suffix' => '</div>',
          'photo_item_title' => array(
            '#type' => 'textfield',
            '#title' => t('Title'),
            '#value' => $photo->title,
          ),
        ),
        'photo_item_description_wrapper' => array(
          '#prefix' => '<div class="photo-item-description-wrapper">',
          '#suffix' => '</div>',
          'photo_item_description' => array(
            '#type' => 'textarea',
            '#title' => t('Description'),
            '#resizable' => FALSE,
            '#value' => $photo->description,
          ),
        ),
      ),
      'photo_item_right' => array(
        '#prefix' => '<div class="photo-item-right photo-item">',
        '#suffix' => '</div>',
        'photo_item_date_wrapper' => array(
          '#prefix' => '<div class="photo-item-date-wrapper">',
          '#suffix' => '</div>',
          '#markup' => t('Upload <br /> !date in !time', array('!date' => format_date($photo->date, 'custom', 'j F'),
            '!time' => format_date($photo->date, 'custom', 'H:i')))
        ),
      ),
    ),
  );

  return drupal_render($template);
}

function svadba_user_photo_form($form, &$form_state, $user) {
  drupal_add_library('system', 'ui.progressbar');
  drupal_add_css(drupal_get_path('module', 'svadba_user') . '/css/svadba_user.css');

  $path = drupal_get_path('module', 'svadba_user') . '/lib/plupload/js/';
  $form['#enctype'] = 'multipart/form-data';
  $form['#action'] = '/get/upload/photo';
  $form['#attributes'] = array(
    'id' => 'upload-photo-form',
  );
  $form['#attached'] = array(
    'js' => array(
      'http://bp.yahooapis.com/2.4.21/browserplus-min.js',
      $path . 'plupload.full.js',
      drupal_get_path('module', 'svadba_user') . '/js/svadba_user_video.js',
    ),
    'css' => array(),
  );

  $form['photo_wrapper'] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'id' => 'container',
    ),
  );

  $form['photo_wrapper']['photo_button_wrapper'] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'id' => 'button-container',
    ),
  );

  $form['photo_wrapper']['photo_button_wrapper']['photo_select'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#attributes' => array('id' => 'pickfiles'),
  );

  /*$form['photo_wrapper']['photo_button_wrapper']['photo_upload'] = array(
    '#type' => 'button',
    '#value' => t('Upload'),
    '#attributes' => array('id' => 'uploadfiles')
  );*/

  $form['photo_wrapper']['photo_drop_zone'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => array(
      'id' => 'drop-zone',
    ),
    '#value' => 'Drop to me',

  );

  $form['photo_wrapper']['photo_file_list'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => svadba_user_get_photo_list($user),
  );

  return $form;
}

function svadba_user_add_album_form($form, &$form_state, $user) {
  $form_state['storage']['user'] = $user;

  $form['add_album_form_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new album'),
  );

  $form['add_album_form_wrapper']['album_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
  );

  $form['add_album_form_wrapper']['album_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#resizable' => FALSE,
  );

  $form['add_album_form_wrapper']['album_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function svadba_user_add_album_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $user = $form_state['storage']['user'];

  $album = new stdClass();
  $album->title = $values['album_title'];
  $album->description = $values['album_description'];
  $album->uid = $user->uid;
  $album->date = time();

  album_save($album);

  unset($form_state['storage']['user']);
  drupal_goto("user/{$user->uid}/photo/1");
}

/**
 * Page callback for photo page
 * @return string
 */
function svadba_user_photo_page($user, $action) {
  $output = '';

  if($action == ''){

  }
  elseif($action == 'add-album'){
    $add_album_form = drupal_get_form('svadba_user_add_album_form', $user);
    $output = drupal_render($add_album_form);
  }
  elseif(is_numeric($action)){
    $form = drupal_get_form('svadba_user_photo_form', $user);
    $output = drupal_render($form);
  }

  return $output;
}

function svadba_user_get_photo_list($user) {
  $items = array();
  $output = '';

  $pids = db_select('photo', 'p')
    ->fields('p', array('pid'))
    ->condition('p.uid', $user->uid);
  $pids->orderBy('p.date', 'DESC');
  $pids = $pids->execute()
               ->fetchCol();


  if(count($pids) > 0){
    $photos = photo_load_multiple($pids);

    foreach($photos as $photo) {
      $items[] = array('data' => svadba_user_photo_item($photo), 'data-pid' => $photo->pid);
    }

    $ul = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array(
        'id' => 'uploaded-photo-list',
      ),
    );

    $output = drupal_render($ul);
  }
  else {
    $output = '<ul id="uploaded-photo-list"></ul>';
  }

  return $output;
}

/**
 * Ajax callback for update title and description in video
 */
function svadba_user_video_update() {
  $video_id = isset($_GET['videoId']) ? $_GET['videoId'] : NULL;
  $video_title = isset($_GET['videoTitle']) ? $_GET['videoTitle'] : '';
  $video_description = isset($_GET['videoDescription']) ? $_GET['videoDescription'] : '';
  $type = isset($_GET['type']) ? $_GET['type'] : '';

  if (!empty($type)) {
    $node = node_load($video_id);
    if ($type == 'title') {
      $node->title = $video_title;
      node_save($node);
    }
    if ($type == 'description') {
      $node->body[LANGUAGE_NONE][0]['value'] = $video_description;
      $node->body[LANGUAGE_NONE][0]['save_value'] = $video_description;
      node_save($node);
    }
  }
  exit;
}

/**
 * Ajax callback for delete video
 */
function svadba_user_video_delete() {
  $video_id = isset($_GET['videoId']) ? $_GET['videoId'] : NULL;

  if ($video_id != NULL) {
    node_delete($video_id);
  }
}

function svadba_user_photo_delete() {
  $photo_id = isset($_GET['photoId']) ? $_GET['photoId'] : NULL;

  if($photo_id != NULL) {
    photo_delete($photo_id);
  }
}

/**
 * Page callback for video page
 * @return string
 */
function svadba_user_video_page($user) {
  $video_form = drupal_get_form('svadba_user_video_form', $user->uid);
  $count_video = db_select('node', 'n')
    ->condition('type', 'video')
    ->condition('uid', $user->uid)
    ->countQuery()
    ->execute()->fetchField();
  if ($count_video != 0) {
    $video_list = views_embed_view('video_edit_list', 'block_1', $user->uid);
  }
  else {
    $video_list = t('You not upload video');
  }

  return drupal_render($video_form) . $video_list;
}

/**
 * Form for add new video
 * @param $form
 * @param $form_state
 * @return array
 */
function svadba_user_video_form($form, &$form_state, $uid) {
  $form['video_wrapper_all'] = array(
    '#type' => 'fieldset',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'svadba_user') . '/js/svadba_user_video.js' => array('type' => 'file')
      )
    ),
  );

  $form['video_wrapper_all']['author'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );

  $form['video_wrapper_all']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Upload'),
  );

  $form['video_wrapper_all']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function svadba_user_video_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  if (!empty($values['url'])) {
    $values['url'] = trim($values['url']);
    if (stristr($values['url'], '.') && !stristr($values['url'], 'http://') && !stristr($values['url'], 'https://')) {
      $item['video_url'] = 'http://' . $values['url'];
    }

    $parts = parse_url($values['url']);
    if (!$parts || !isset($parts['host'])) {
      form_set_error('url', t('Invalid video url'));
    }
    else {
      $host = $parts['host'];
      if (stripos($host, 'www.') > -1) {
        $host = substr($host, 4);
      }
      $domains = _video_embed_field_get_provider_domains();
      if (!array_key_exists($host, $domains)) {
        form_set_error('url', t('This video provider is not currently supported'));
      }
    }
  }
}

function svadba_user_video_form_submit($form, &$form_state) {
  global $language;
  $values = $form_state['values'];

  $node = new stdClass();
  $node->type = 'video';
  $node->title = t('New video');
  $node->status = 1;
  $node->language = $language->language;
  $node->uid = $values['author'];
  //  $node->path = array('alias' => pathauto_cleanstring($values['article_title']));
  node_object_prepare($node);

  $node->body[LANGUAGE_NONE][0]['value'] = '';
  $node->body[LANGUAGE_NONE][0]['save_value'] = '';
  //$node->body[LANGUAGE_NONE][0]['format'] = $values['text_article']['format'];

  $node->field_video[LANGUAGE_NONE][0]['video_url'] = $values['url'];

  $node = node_submit($node);
  node_save($node);
}

/**
 * Page callback for map page
 * @return string
 */
function svadba_user_map_page() {
  return 'Map';
}

/**
 * Page callback for article page
 * @param $user
 * @return array|mixed
 */
function svadba_user_article_page($user) {
  return drupal_get_form('svadba_user_article_form', $user->uid);
}

/**
 * Form for add new articles
 * @param $form
 * @param $form_state
 * @param $uid
 * @return array
 */
function svadba_user_article_form($form, &$form_state, $uid) {
  $form['article_form_wrapper'] = array(
    '#type' => 'fieldset',
  );

  $form['article_form_wrapper']['author'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );

  $form['article_form_wrapper']['show_on_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show article on page'),
  );

  $form['article_form_wrapper']['article_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title article'),
    '#required' => TRUE,
  );

  $form['article_form_wrapper']['article_tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
  );

  $form['article_form_wrapper']['type_arcticles'] = array(
    '#type' => 'select',
    '#options' => array(
      'interview' => t('Interview'),
      'fashion' => t('Fashion'),
      'news' => t('News'),
      'interesting' => t('Interesting'),
    ),
    '#default_value' => 'interview',
  );

  $form['article_form_wrapper']['photo_article'] = array(
    '#type' => 'file',
    '#title' => t('Add photo'),
  );

  $form['article_form_wrapper']['text_article'] = array(
    '#type' => 'text_format',
    '#title' => t('Arcticle text'),
    '#format' => 'filtered_html'
  );

  $form['article_form_wrapper']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publisher'),
  );

  return $form;
}

function svadba_user_article_form_validate($form, &$form_state) {

}

function svadba_user_article_form_submit($form, &$form_state) {
  global $language;
  $values = $form_state['values'];

  $node = new stdClass();
  $node->type = $values['type_arcticles'];
  $node->title = $values['article_title'];
  $node->status = 1;
  $node->language = $language->language;
  $node->uid = $values['author'];
  //  $node->path = array('alias' => pathauto_cleanstring($values['article_title']));
  node_object_prepare($node);

  $node->body[LANGUAGE_NONE][0]['value'] = $values['text_article']['value'];
  $node->body[LANGUAGE_NONE][0]['save_value'] = $values['text_article']['value'];
  $node->body[LANGUAGE_NONE][0]['format'] = $values['text_article']['format'];

  $file = file_save_upload('photo_article');
  $file->status = 1;
  $file = file_copy($file, 'public://');

  switch ($values['type_arcticles']) {
    case 'interview':
      $node->field_photo_interviews[LANGUAGE_NONE][0] = (array) $file;
      break;
    case 'fashion':
      $node->field_photo_fashions[LANGUAGE_NONE][0] = (array) $file;
      break;
    case 'news':
      $node->field_photo_news[LANGUAGE_NONE][0] = (array) $file;
      break;
    case 'interesting':
      $node->field_photo_interestings[LANGUAGE_NONE][0] = (array) $file;
      break;
    default:
      break;
  }

  $node = node_submit($node);
  node_save($node);
}